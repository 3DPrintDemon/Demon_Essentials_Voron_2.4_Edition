
###################################################
#######>>>>>>>>>>  3DPrintDemon  <<<<<<<<<<<#######
#######   https://github.com/3DPrintDemon   #######

# IF YOU USE & LIKE THESE MACROS PLEASE CONSIDER SUPPORTING MY EFFORTS AT 
# https://ko-fi.com/3dprintdemon

########################## VERY IMPORTANT ###############################
#########################################################################
# FOR THIS TO WORK!!!
# YOU MUST DO THIS!!!

#########################################################################
# ADD THE 3 LINES BELOW TO PRUSASLICER'S START GCODE SECTION
#########################################################################
# M104 S0
# M140 S0
# print_start EXTRUDER=[first_layer_temperature[initial_extruder]] BED=[first_layer_bed_temperature] LAYER=[layer_height] FILAMENT=[filament_type] EXTRUSION=[external_perimeter_extrusion_width] 

# #########################################################################
# IF YOU USE ORCA SLICER - you have extra features available to you!
# ADD THE 3 LINES BELOW TO ORCA SLICER'S START GCODE SECTION
#########################################################################
# M104 S0
# M140 S0
# PRINT_START EXTRUDER=[nozzle_temperature_initial_layer] BED=[hot_plate_temp_initial_layer] LAYER=[layer_height] FILAMENT=[filament_type] EXTRUSION=[outer_wall_line_width]

#########################################################################
# ORCA SLICER ONLY!!
#########################################################################
# To enable Orca slicer only Adaptive Pressure Advance features paste the line below into the "Change extrusion role G-code" box near the bottom of the "Machine G-code" tab of your "Printer settings".
# Be sure to save your changes & then set "variable_orca_enable:" to "True" below.

# _ADAPTIVE_PA TYPE=[extrusion_role]

#########################################################################
# IF YOU USE CURA ADD THE 3 LINES BELOW TO CURA SLICER'S START GCODE SECTION
#########################################################################
# M109 S0
# M190 S0
# print_start EXTRUDER={material_print_temperature_layer_0} BED={material_bed_temperature_layer_0} LAYER={layer_height} FILAMENT={material_type} EXTRUSION={line_width}

#########################################################################
#########################################################################

# Also be sure to add the line below in your slicer's End G-Code box

# PRINT_END

#########################################################################
# BE SURE TO DELETE THE HASH "#" AT THE LINE START IN YOUR SLICER OR IT WONT WORK
# Your slicer's Start G-Code box most only contain those 3 lines above, plus the Mainsail layer count command - see mailsail website, slicer.
# Your slicer's End G-Code box must only contain that line above
# https://docs.mainsail.xyz/overview/slicer
#########################################################################


############# YOU'LL NEED THESE!!!! ###############
# Make sure you download install these files they are REQUIRED for these macros to work correctly.
# https://github.com/rkolbi/voron2.4/blob/main/non-blocking_wait.md
# https://github.com/VoronDesign/Voron-Stealthburner/blob/main/Firmware/stealthburner_leds.cfg


#########################################################################
# BEFORE FIRST USE
#########################################################################

# CHECK YOUR VALUES ARE CORRECT BEFORE USE, THIS IS VITAL & TOTALLY ON YOU!

# DO NOT BLINDLY USE THESE DEFAULTS!!

# USE THESE MACROS AT YOUR OWN RISK! 

# DONT CRY TO ME IF YOU DIDN'T CHECK/CHANGE VALUES & YOU BREAK THINGS!


# >>>>>>>>>>>>>>>>>>>>>>>>>!!WARNING!!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# THIS START CODE USES RELATIVE EXTRUSION!! SET IT IN YOUR SLICER!

# This macro relies on you setting the correct filament type in your slicer! BE SURE YOU DO THIS! OR IT WILL NOT WORK!!


 ####### IMPORTANT!!! BUILD NEW HIGH TEMP BED MESH WITH THE BED OVER 90ºc! ALLOW TO HEAT SOAK 10-15 MINUTES THEN HOME BEFORE BUILDING MESH!! #######
 ######################################## BUILD & STORE A NEW MESH WITH BED OVER 90ºc! CALL IT "ASA" ###############################################
 ################################################ DO NOT OVERWRITE YOUR "DEFAULT" MESH!!! ##########################################################

# The 5 meshes to build USE THE NEW MESH BUILDER MACRO
# default  #<<<< USED FOR PLA & undefined profiles (default settings below)
# ASA
# ABS
# PETG
# TPU

# DONT PLAY WITH THINGS HERE UNLESS YOU KNOW WHAT YOURE DOING, BAD THINGS CAN HAPPEN IF YOU BREAK STUFF :-0


[gcode_macro PRINT_START]
gcode:
# Do not edit this section, this gets the info from the print file
  {% set first_layer_bed = params.BED|int %}
  {% set first_layer_extruder = params.EXTRUDER|float %}
  {% set layer_height = params.LAYER|default(0.2)|float %}
  {% set filament_type = params.FILAMENT|default('PLA')|string %}
  {% set extrusion_width = params.EXTRUSION|default(0.4)|float %}
  {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float / 2 %}

  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  
## PREPARE ####################################################################################################################################

  {% if start_vars.orca_enable == True %}
    SET_GCODE_VARIABLE MACRO=_APA_VARS VARIABLE=fil_type VALUE='"{filament_type}"'
    _APA_SET
  {% endif %}
  
    _DEMON_VERSION
  {% if start_vars.printer_lights == True %}  
    {% if printer["Printer_Lights"] != start_vars.printer_lights_print %}
      SET_PIN PIN=Printer_Lights VALUE={start_vars.printer_lights_print}
    {% endif %}
  {% endif %}
  
    STATUS_BUSY

## STATE RESET TO PRINT ############################################################################################################################
    
    G90 ; Use absoulte coordinates
    M83 ; Extruder relative mode
    SET_GCODE_OFFSET Z=0.0 # Reset the G-Code Z offset
    BED_MESH_CLEAR       # Clears currently loaded mesh    

## INITIAL SETUP ############################################################################################################################
  
    M220 S{start_vars.feed_rate}
 
  {% if filament_type in ['PLA', 'PLA+'] and layer_height|float <0.25%}
    M221 S{start_vars.pla_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.pla_pa} SMOOTH_TIME={start_vars.pla_st}

  {% elif filament_type == 'ASA' and layer_height|float <0.25%}
    M221 S{start_vars.asa_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.asa_pa} SMOOTH_TIME={start_vars.asa_st}

  {% elif filament_type == 'ABS' and layer_height|float <0.25%}
    M221 S{start_vars.abs_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.abs_pa} SMOOTH_TIME={start_vars.abs_st}

  {% elif filament_type in ['PET', 'PETG'] and layer_height|float <0.25%}
    M221 S{start_vars.petg_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.petg_pa} SMOOTH_TIME={start_vars.petg_st}   

  {% elif filament_type in ['FLEX', 'TPU'] and layer_height|float <0.25%}
    M221 S{start_vars.tpu_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.tpu_pa} SMOOTH_TIME={start_vars.tpu_st}  


  {% elif filament_type in ['PLA', 'PLA+'] and layer_height|float >0.26%}
    M221 S{start_vars.pla_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.pla_pa} SMOOTH_TIME={start_vars.pla_st}

  {% elif filament_type == 'ASA' and layer_height|float >0.26%}
    M221 S{start_vars.asa_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.asa_pa} SMOOTH_TIME={start_vars.asa_st}

  {% elif filament_type == 'ABS' and layer_height|float >0.26%}
    M221 S{start_vars.abs_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.abs_pa} SMOOTH_TIME={start_vars.abs_st}

  {% elif filament_type in ['PET', 'PETG'] and layer_height|float >0.26%}
    M221 S{start_vars.petg_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.petg_pa} SMOOTH_TIME={start_vars.petg_st}
   
  {% elif filament_type in ['FLEX', 'TPU'] and layer_height|float >0.26%}
    M221 S{start_vars.tpu_hi_flow_rate}
    SET_PRESSURE_ADVANCE ADVANCE={start_vars.tpu_pa} SMOOTH_TIME={start_vars.tpu_st}  

  {% endif %}

## FILAMENT STATE CHECK ############################################################################################################################

  {% if start_vars.runout_sensor == True %}
    {% if not printer["filament_switch_sensor filament_sensor"].filament_detected %} # Runout Sensor Check, E-Stop if empty! 
      {action_raise_error("This error is caused by no filament loaded! Please load filament & restart the print!")}

    {% endif %}
 
  {% endif %}

## INITIAL BED HEATING ############################################################################################################################

    STATUS_HEATING
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={first_layer_bed} 

## NOZZLE PREHEATING ############################################################################################################################

  {% if filament_type in ['PLA', 'PLA+'] %} 
    SET_DISPLAY_TEXT MSG="PLA File Detected Hotend Preheat: {start_vars.pla_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="PLA File Detected Hotend Preheat: {start_vars.pla_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.pla_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.pla_noz_pre|float -2} MAXIMUM={start_vars.pla_noz_pre|float + 5}
  
  {% elif filament_type == 'ASA' %} 
    SET_DISPLAY_TEXT MSG="ASA File Detected Hotend Preheat: {start_vars.asa_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="ASA File Detected Hotend Preheat: {start_vars.asa_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.asa_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.asa_noz_pre|float -2} MAXIMUM={start_vars.asa_noz_pre|float + 5}    
  
  {% elif filament_type == 'ABS' %} 
    SET_DISPLAY_TEXT MSG="ABS File Detected Hotend Preheat: {start_vars.abs_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="ABS File Detected Hotend Preheat: {start_vars.abs_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.abs_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.abs_noz_pre|float -2} MAXIMUM={start_vars.abs_noz_pre|float + 5}    

  {% elif filament_type in ['PET', 'PETG'] %}
    SET_DISPLAY_TEXT MSG="PETG File Detected Hotend Preheat: {start_vars.petg_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="PETG File Detected Hotend Preheat: {start_vars.petg_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.petg_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.petg_noz_pre|float -2} MAXIMUM={start_vars.petg_noz_pre|float + 5}

  {% elif filament_type in ['FLEX', 'TPU'] %}
    SET_DISPLAY_TEXT MSG="TPU File Detected Hotend Preheat: {start_vars.tpu_noz_pre}c"          # Displays info 
    RESPOND TYPE=COMMAND MSG="TPU File Detected Hotend Preheat: {start_vars.tpu_noz_pre}c"          # Displays info 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.tpu_noz_pre} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.tpu_noz_pre|float -2} MAXIMUM={start_vars.tpu_noz_pre|float + 5}

  {% elif not filament_type in ['PLA', 'PLA+', 'ASA', 'ABS', 'PET', 'PETG', 'FLEX', 'TPU'] %}
    {% if params.EXTRUDER|float <220 %}
      SET_DISPLAY_TEXT MSG="Hotend Preheat by file temp: {start_vars.default_lo_noz_pre}c"          # Displays info        
      RESPOND TYPE=COMMAND MSG="Hotend Preheat by file temp: {start_vars.default_lo_noz_pre}c"          # Displays info        
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.default_lo_noz_pre} 
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.default_lo_noz_pre|float -2} MAXIMUM={start_vars.default_lo_noz_pre|float + 5}

    {% else %}
      SET_DISPLAY_TEXT MSG="Hotend Preheat by file temp: {start_vars.default_hi_noz_pre}c"          # Displays info          
      RESPOND TYPE=COMMAND MSG="Hotend Preheat by file temp: {start_vars.default_hi_noz_pre}c"          # Displays info      
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={start_vars.default_hi_noz_pre} 
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={start_vars.default_hi_noz_pre|float -2} MAXIMUM={start_vars.default_hi_noz_pre|float + 5}

    {% endif %}  

  {% endif %}

    M400

## HOMING ############################################################################################################################

  {% if "xyz" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    SET_DISPLAY_TEXT MSG="Homing..."
    RESPOND TYPE=COMMAND MSG="Homing..."
    G28

  {% else %}
    {% if start_vars.klicky_probe == True %}
      _klicky_check
    {% endif %}
  {% endif %}

    M400
#    CLEAN_NOZZLE 

## CHAMBER FAN SETTING ############################################################################################################################

  {% if start_vars.chamber_fan == True %}

    {% if filament_type in ['PLA', 'PLA+'] %}        
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.pla_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: PLA {start_vars.pla_chamber_temp}c"
      
    {% elif filament_type == 'ASA' %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.asa_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: ASA {start_vars.asa_chamber_temp}c"

    {% elif filament_type == 'ABS' %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.abs_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: ABS {start_vars.abs_chamber_temp}c"

    {% elif filament_type in ['PET', 'PETG'] %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.petg_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: PETG {start_vars.petg_chamber_temp}c"

    {% elif filament_type in ['FLEX', 'TPU'] %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.tpu_chamber_temp}
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: TPU {start_vars.tpu_chamber_temp}c"

    {% else %} 
      SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.default_chamber_temp}  
      RESPOND TYPE=COMMAND MSG="Setting Chamber Fan Temp: Default {start_vars.default_chamber_temp}c"

    {% endif %}

  {% endif %}

   

## BED FANS START SETTING ##############################################################################################################################

  {% if start_vars.bed_fans == True %}

    {% if filament_type in ['PLA', 'PLA+'] %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.pla_bed_fan_start_speed}

    {% elif filament_type == 'ASA' %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.asa_bed_fan_start_speed}

    {% elif filament_type == 'ABS' %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.abs_bed_fan_start_speed}

    {% elif filament_type in ['PET', 'PETG'] %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.petg_bed_fan_start_speed}

    {% elif filament_type in ['FLEX', 'TPU'] %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.tpu_bed_fan_start_speed}

    {% else %}
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.default_bed_fan_start_speed}

    {% endif %}

  {% endif %}


## NEVERMORE START SETTING ##############################################################################################################################

  {% if start_vars.nevermore == True %}

    {% if filament_type in ['PLA', 'PLA+'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.pla_nevermore_start_speed}

    {% elif filament_type == 'ASA' %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.asa_nevermore_start_speed}

    {% elif filament_type == 'ABS' %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.abs_nevermore_start_speed}

    {% elif filament_type in ['PET', 'PETG'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.petg_nevermore_start_speed}

    {% elif filament_type in ['FLEX', 'TPU'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.tpu_nevermore_start_speed}

    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.default_nevermore_start_speed}

    {% endif %}

  {% endif %}
  
## BED MESH & FILAMENT HANDLING #########################################################################################################################

  {% if filament_type in ['PLA', 'PLA+'] %}        
    BED_MESH_PROFILE LOAD="default"
    RESPOND TYPE=COMMAND MSG="Default Mesh Loaded"

  {% elif filament_type == 'ASA' %} 
    BED_MESH_PROFILE LOAD="ASA"
    SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
    RESPOND TYPE=COMMAND MSG="ASA Mesh Loaded"

  {% elif filament_type == 'ABS' %} 
    BED_MESH_PROFILE LOAD="ABS"
    SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
    RESPOND TYPE=COMMAND MSG="ABS Mesh Loaded"
   
  {% elif filament_type in ['PET', 'PETG'] %}  
    BED_MESH_PROFILE LOAD="PETG" 
    SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
    RESPOND TYPE=COMMAND MSG="PETG Mesh Loaded"

  {% elif filament_type in ['FLEX', 'TPU'] %}  
    BED_MESH_PROFILE LOAD="TPU"   
    SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
    RESPOND TYPE=COMMAND MSG="TPU Mesh Loaded"

  {% else %}    
    {% if params.BED|float < 90 %}
      BED_MESH_PROFILE LOAD="default"
      RESPOND TYPE=COMMAND MSG="Default mesh by temp loaded"

    {% else %}
      BED_MESH_PROFILE LOAD="ASA" 
      SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=offset_reset VALUE=True
      RESPOND TYPE=COMMAND MSG="ASA mesh by temp loaded"

    {% endif %}    

  {% endif %}

## APPLY OFFSET ADJUSTMENTS ############################################################################################################################

## Use with EXTREME caution!! Manual G-Code Z offset override!

  {% if start_vars.high_temp_expansion_offset and filament_type in ['ASA', 'ABS'] %}
    {% if start_vars.high_temp_offset >= -0.1 and start_vars.high_temp_offset <= 0.1%}
      SET_GCODE_OFFSET Z_ADJUST={start_vars.high_temp_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
      SET_DISPLAY_TEXT MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
      RESPOND TYPE=echo MSG="REQUESTED HIGH TEMP OFFSET ADJUSTMENT APPLIED"
      G4 P10000

    {% else %}
      {action_emergency_stop("EMERGENCY STOP! EXCESSIVE HIGH TEMP OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
    {% endif %}    

  {% elif start_vars.petg_anti_squish == True and filament_type in ['PET', 'PETG'] %}
    {% if start_vars.petg_offset >= 0.0 and start_vars.petg_offset <= 0.1%}
      SET_GCODE_OFFSET Z_ADJUST={start_vars.petg_offset} MOVE=1 # <<<<<<<<<<<<<<<<<<< Use with EXTREME caution!! Manual G-Code Z offset override!
      SET_DISPLAY_TEXT MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
      RESPOND TYPE=echo MSG="REQUESTED PETG OFFSET ADJUSTMENT APPLIED"
      G4 P10000

    {% else %}
      {action_emergency_stop("EMERGENCY STOP! NEGATIVE OR EXCESSIVE PETG OFFSET REQUESTED CORRECT IN USER SETTINGS FILE")} # M112
    
    {% endif %}  

  {% endif %}

## BED TEMP WAITS & TIMERS ############################################################################################################################

    STATUS_HEATING                                     

    SET_DISPLAY_TEXT MSG="Waiting For Bed Temp: {first_layer_bed}c"                
    RESPOND TYPE=COMMAND MSG="Waiting For Bed Temp: {first_layer_bed}c"             
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={first_layer_bed} 
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={first_layer_bed|int -2} MAXIMUM={first_layer_bed|int + 5}
    RESPOND TYPE=COMMAND MSG="Bed Temp Reached"

  {% if start_vars.chamber_sensor == True %}    

    {% if filament_type in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %}
      {% if printer["temperature_sensor Chamber_Temp"].temperature <start_vars.lo_heat_soak_threshold %}
        G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
          {% if start_vars.chamber_temp_wait == True %}
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.lo_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={start_vars.lo_heat_soak_threshold|float}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
            _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via sensor"
          {% endif %}  

      {% else %}
        SET_DISPLAY_TEXT MSG="Already up to {filament_type} temp, heat soak skipped"
        RESPOND TYPE=COMMAND MSG="Already up to {filament_type} temp, heat soak skipped"
        G4 P5000
      {% endif %}          

    {% elif filament_type in ['ASA', 'ABS'] %}
      {% if printer["temperature_sensor Chamber_Temp"].temperature <start_vars.hi_heat_soak_threshold %}
        G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
          {% if start_vars.chamber_temp_wait == True %}
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.hi_heat_soak_threshold}c"
            M106 S255 
            TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={start_vars.hi_heat_soak_threshold|float}
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
          {% else %}
            M106 S255
            _HEAT_WAIT MINUTES={start_vars.hi_temp_timer} 
            RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via sensor"
          {% endif %}  

      {% else %}
        SET_DISPLAY_TEXT MSG="Already up to {filament_type} temp, heat soak skipped"
        RESPOND TYPE=COMMAND MSG="Already up to {filament_type} temp, heat soak skipped"
        G4 P5000
      {% endif %} 
         
    {% else %}
      {% if printer["temperature_sensor Chamber_Temp"].temperature <start_vars.default_heat_soak_threshold %}
        _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
        G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
          {% if start_vars.chamber_temp_wait == True %}
            SET_DISPLAY_TEXT MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            RESPOND TYPE=COMMAND MSG="Waiting For Chamber Temp: {start_vars.default_heat_soak_threshold}c"
            TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Temp" MINIMUM={start_vars.default_heat_soak_threshold|float} 
            RESPOND TYPE=COMMAND MSG="Chamber Temp Reached"
            
          {% elif start_vars.chamber_temp_wait == False %}  
            _HEAT_WAIT MINUTES={start_vars.default_temp_timer}
            RESPOND TYPE=COMMAND MSG="Running Default Temp Chamber Timer via sensor"
          {% endif %}   
      {% else %}
        SET_DISPLAY_TEXT MSG="Already up to Default temp heat soak skipped"
        RESPOND TYPE=COMMAND MSG="Already up to {filament_type} temp, heat soak skipped"
        G4 P5000
      {% endif %}

    {% endif %}
   
  {% endif %}


  {% if start_vars.chamber_sensor == False %}

    {% if filament_type in ['PLA', 'PLA+', 'PET', 'PETG', 'FLEX', 'TPU'] %} 
      RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via Fliament Type"
      G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
      _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}     
    
    {% elif filament_type in ['ASA', 'ABS'] %}  
      RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via Fliament Type"
      G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
      # M106 S255
      _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}  
       
    {% else %}
      {% if params.BED|float < 90 %}
        RESPOND TYPE=COMMAND MSG="Running Low Temp Chamber Timer via File Temps"
        G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed 
        _HEAT_WAIT MINUTES={start_vars.lo_temp_timer}

      {% else %}
        RESPOND TYPE=COMMAND MSG="Running High Temp Chamber Timer via File Temps"
        G1 X{x_park} Y{y_park} Z50 F9000                         # Goes to center of the bed
        # M106 S255
        _HEAT_WAIT MINUTES={start_vars.hi_temp_timer}
      {% endif %}
    {% endif %}
    
    
  {% endif %}

    M107                                                    # Turns off parts cooling fan

## GANTRY LEVELLING ############################################################################################################################

    CLEAN_NOZZLE
    STATUS_LEVELING
    G28 Z
    SET_DISPLAY_TEXT MSG="Gantry Levelling" 
    RESPOND TYPE=COMMAND MSG="Gantry Levelling" 
    QUAD_GANTRY_LEVEL 
    CLEAN_NOZZLE
    G28 Z

## MOVE TO START POSITION & READY ############################################################################################################################
  
  {% if start_vars.start_x_position >= 50 or start_vars.start_y_position >= 50%}
    {action_emergency_stop("EMERGENCY STOP! EXCESSIVE START POSITION REQUESTED CORRECT IN USER SETTINGS FILE")}

  {% elif start_vars.purge_line_length|float > 150 %}
    {action_emergency_stop("EMERGENCY STOP! EXCESSIVE PURGE LENGTH REQUESTED CORRECT IN USER SETTINGS FILE")}
    
  {% endif %}

    SET_DISPLAY_TEXT MSG="Moving to Start Position"
    RESPOND TYPE=COMMAND MSG="Moving to Start Position"
    G0 Z25 F5000
    G0 X{start_vars.start_x_position} Y{start_vars.start_y_position} F5000 # Move to start position

    
    G0 Z5.0 F5000 # Lower speed
    G0 Z0.5 F150 # Lower slow for wait & to catch oozing nozzle during heating

    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Heating Hotend: {first_layer_extruder}c"
    RESPOND TYPE=COMMAND MSG="Heating Hotend: {first_layer_extruder}c"
    STATUS_HEATING                                              
 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={first_layer_extruder} 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={first_layer_extruder|float -2} MAXIMUM={first_layer_extruder|float + 5}

## BED FANS PRINT SETTING ##############################################################################################################################

  {% if start_vars.bed_fans == True %}

    {% if filament_type in ['PLA', 'PLA+'] %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.pla_bed_fan_print_speed}

    {% elif filament_type == 'ASA' %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.asa_bed_fan_print_speed}

    {% elif filament_type == 'ABS' %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.abs_bed_fan_print_speed}

    {% elif filament_type in ['PET', 'PETG'] %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.petg_bed_fan_print_speed}

    {% elif filament_type in ['FLEX', 'TPU'] %} 
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.tpu_bed_fan_print_speed}

    {% else %}
      SET_FAN_SPEED FAN=Bed_Fans SPEED={start_vars.default_bed_fan_print_speed}

    {% endif %}

  {% endif %}

  ## NEVERMORE PRINT SETTING ##############################################################################################################################

  {% if start_vars.nevermore == True %}

    {% if filament_type in ['PLA', 'PLA+'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.pla_nevermore_print_speed}

    {% elif filament_type == 'ASA' %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.asa_nevermore_print_speed}

    {% elif filament_type == 'ABS' %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.abs_nevermore_print_speed}

    {% elif filament_type in ['PET', 'PETG'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.petg_nevermore_print_speed}

    {% elif filament_type in ['FLEX', 'TPU'] %} 
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.tpu_nevermore_print_speed}

    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED={start_vars.default_nevermore_print_speed}

    {% endif %}

  {% endif %}

## PRINT PURGE LINES ############################################################################################################################

    STATUS_PRINTING
    _PURGE_LINES


[gcode_macro _PURGE_LINES]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set height = (printer.configfile.settings.extruder.nozzle_diameter * 0.75)|float %}
  {% set width = (printer.configfile.settings.extruder.nozzle_diameter * 1.25)|float %}
  {% set filament_area = 3.14159 * (printer.configfile.settings.extruder.filament_diameter ** 2) / 4 %}
  {% set rate = start_vars.purge_line_length * ((width * height) / filament_area) %}

    SET_DISPLAY_TEXT MSG="Printing Purge Lines"
    RESPOND TYPE=COMMAND MSG="Printing Purge Lines"
    G90  # Absolute mode
    G0 Z1.5 F9000 # Jump up to leave ooze blob

    G91 # Relative mode
  {% if start_vars.purge_along_y == True %}
    G0 Y7 F9000 # Move away from ooze blob
  {% else %}
    G0 X7 F9000
  {% endif %}

    G90 # Absolute mode
    G0 Z{height} F1500    
    G91 # Relative mode
    
  {% if start_vars.purge_along_y == True %} 
    G1 Y{start_vars.purge_line_length} E{rate} F1500 # Draw the first line
    G0 X{width +0.4} F5000 # Move to side a little
    G1 Y-{start_vars.purge_line_length -15} E{rate} F1500
  # G4 P2000 # wait 02 seconds    

  {% else %}
    G1 X{start_vars.purge_line_length} E{rate} F1500 # Draw the first line
    G0 Y{width} F5000 # Move to side a little
    G1 X-{start_vars.purge_line_length -15} E{rate} F1500
  # G4 P2000 # wait 02 seconds 
  {% endif %}

    G0 Z{height} F9000 # Lift a little
    G0 X5 Y5 F9000 # Wipe Out
    G90 # Absolute mode
    G92 E0.0 # Reset Extruder
    M83 # Extruder relative mode
    G0 Z5.0 F9000 # Move Z Axis up little to prevent scratching of Heat Bed
    M400
    SET_DISPLAY_TEXT MSG="Print Start..."
    RESPOND TYPE=COMMAND MSG="Print Start..."


#######################################################
# Used to finish your print & leave your printer in a safe state
#######################################################

[gcode_macro PRINT_END]
variable_offset_reset: False
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}

    G91 # RELATIVE POSITIONING
    G1 E-2 F2700 # RETRACT A BIT
    G1 E-2 Z0.2 F2400 # RETRACT AND RAISE Z
    G0 X5 Y5 F9000 # WIPE OUT
    G90 # ABSOLUTE POSITIONING
  
  {% if printer.toolhead.position.z|float < 50 %}
    G0 Z50 F3600

  {% endif %}

  {% if offset_reset == True %}
    SET_GCODE_OFFSET Z=0.0 MOVE=1 # Reset the adjusted G-Code Z offset
  {% endif %}  

  {% if start_vars.chamber_fan == True %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={start_vars.post_print_cool}    
  {% endif %}
  
  {% if start_vars.bed_fans == True %}
    SET_FAN_SPEED fan_generic=Bed_Fans SPEED=0
  {% endif %}

  {% if start_vars.nevermore == True %}
    SET_FAN_SPEED fan_generic=nevermore SPEED=0                           
  {% endif %}

    SET_DISPLAY_TEXT MSG="Print Complete!"
    RESPOND TYPE=COMMAND MSG="Print Complete!"
    _TOOLHEAD_PARK_PAUSE_CANCEL # park head & present print

    M104 S0 # kill extruder temperature
    M140 S0 # kill bed temperature

    M84 X Y E # DISABLE ALL STEPPERS BUT Z
    M220 S100 # reset feed rate to 100 percent
    M221 S100 # reset flow rate to 100 percent

    BED_MESH_CLEAR

  {% if start_vars.shutdown_relay == True %} 
    {% if printer["output_pin PRINTER_AUTO_OFF"].value == 1.0 %}
      _GOODNIGHT
   
    {% else %}
      M107 # kill fan
      M117
      STATUS_READY
    {% endif %}

  {% else %}
    M107 # kill fan
    M117
    STATUS_READY
  {% endif %}

  {% if start_vars.printer_lights == True %}  
    {% if printer["Printer_Lights"] != start_vars.printer_lights_finish %}
      SET_PIN PIN=Printer_Lights VALUE={start_vars.printer_lights_finish}
      status_off
    {% endif %}
  {% endif %}
  
; total layers count = [total_layer_count]




#######################################################
# Use this macro to calibrate your retractoin settings when using the generated files from http://www.retractioncalibration.com/
# All you need do is paste "_RET_CALI_START" into the website's "Custom Gcode" box next to the green "Generate Gcode" button
#######################################################

[gcode_macro _RET_CALI_START]
gcode:

    BED_MESH_PROFILE LOAD="default"
 
    CLEAN_NOZZLE
    SET_DISPLAY_TEXT MSG="Gantry Levelling"
    G28 Z
    QUAD_GANTRY_LEVEL 
    CLEAN_NOZZLE
    G28 Z

    STATUS_PRINTING

    M117 Start Position
    G0 X0.4 Y10 Z25 F5000

    G0 X0.4 Y10 Z5.0 F5000 # Move to start position
    G0 Z0.5 F150 # Lower to ready

    M117 Printing Purge Lines
    G0 Z1.5 F9000
    G0 Y17 F9000
    G0 Z0.5 F1500
    G0 Z0.30 F150 # Move lower to first layer height
    #G4 P2000 # wait 2 seconds

    G1 X0.4 Y150 F1500.0 E15 # Draw the first line
    G0 X0.7 Y150 F5000.0 # Move to side a little
    G1 X0.7 Y27 F1500.0 E30 # Draw the second line
    #G4 P2000 # wait 02 seconds

    M117 Print Start...
    G0 Z0.6 F1500 # Lift A BIT
    G92 E0.0 # Reset Extruder
    
    G0 Z3.0 F1500 # Move Z Axis up little to prevent scratching of Heat Bed




#######################################################
# If you have a power on/off relay 
# This macro is used to shutdown your printer after printing
# It is called by the END_PRINT macro
#######################################################

[gcode_macro _GOODNIGHT]
gcode:
    M106 S255 # max part fan to cool

    M117 Cooling Hotend....
    M109 S49 # reach temp
    M400 # wait
    M107 # kill fan
    M81 # printer power off

    M117 GOODNIGHT...Zzzzzz
    M118 GOODNIGHT...Zzzzzz
    STATUS_OFF


#######################################################
# SYSTEM MACROS DO NOT EDIT
#######################################################
#######################################################
# for use with Klicky Probe, in some rare instances the probe can
# be still attached with the steppers engaged & another print can be started
# without the Klicky Macros checking if the probe is still attached.
# this fixes that!
#######################################################

[gcode_macro _klicky_check]
gcode:
    query_probe
    _probe_state action={ params.ACTION }


[gcode_macro _probe_state]
gcode:
  {% set query_probe_triggered = printer.probe.last_query %}
  {% set action  = params.ACTION|default('') %}
  
  {% if query_probe_triggered %}

  {% else %}
    Dock_Probe_Unlock  
  {% endif %}


[gcode_macro _DEMON_VERSION]
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set cl_vars = printer["gcode_macro _CL_VERSION_VARIABLES"] %}
  {% set sh_vars = printer["gcode_macro _SH_VERSION_VARIABLES"] %}
  {% set zc_vars = printer["gcode_macro _ZC_VERSION_VARIABLES"] %}
  {% set pm_vars = printer["gcode_macro _PM_VERSION_VARIABLES"] %}
  {% set bm_vars = printer["gcode_macro _BM_VERSION_VARIABLES"] %}
  {% set ap_vars = printer["gcode_macro _AP_VERSION_VARIABLES"] %}
  
  {% if not start_vars.demon_version|float == 2.5 %}
    _DEMON_VERSION_MISMATCH

  {% elif not cl_vars.demon_clean_load|float == 1.3 %}
    _DEMON_VERSION_MISMATCH 

  {% elif not sh_vars.demon_setup|float == 1.3 %}
    _DEMON_VERSION_MISMATCH

  {% elif not zc_vars.demon_z_cal|float == 1.3 %}
    _DEMON_VERSION_MISMATCH

  {% elif not pm_vars.demon_prepare_menu|float == 1.0 %}
    _DEMON_VERSION_MISMATCH   

  {% elif not bm_vars.demon_bed_mesh|float == 1.0 %}
    _DEMON_VERSION_MISMATCH  

  {% elif not ap_vars.demon_apa|float == 1.0 %}
    _DEMON_VERSION_MISMATCH      
    
  {% endif %}

    
[gcode_macro _DEMON_VERSION_MISMATCH]
gcode:
    RESPOND TYPE=error MSG="EMERGENCY STOP! Demon_version mismatch please update your Demon Macro files!"
    M117 EMERGENCY STOP! Demon_version mismatch please update your Demon Macro files!
    G4 P15000
    M112 # E-Stop & shutdown 






